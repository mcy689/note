package AlgoSort

/**
 * 冒泡排序：是稳定的排序算法，是原地排序算法。
 *  冒泡排序是比较相邻两数的大小来完成排序的。这里定义比较边界，也就是进行大小比较的边界。对于长度为n的数组，第一趟的比较
 *  边界为[0,n-1]，也就是说从a[0]开始，相邻元素两两比较大小，如果满足条件就进行交换，否则继续比较，一直到最后一个比较的
 *  元素为a[n-1]为止，此时第一趟排序完成。以升序排序为例，每趟排序完成之后，比较边界中的最大值就沉入底部，比较边界就向前
 *  移动一个位置。所以，第二趟排序开始时，比较边界是[0,n-2]。对于长度为n的序列，最多需要n趟完成排序，所以冒泡排序就由两层
 *  循环构成，最外层循环用于控制排序的趟数，最内层循环用于比较相邻数字的大小并在本趟排序完成时更新比较边界。
 */

func BubbleSort(nums []int, fn func(a, b int) bool) []int {
	count := len(nums)
	if count <= 1 {
		return nums
	}
	for j := 0; j < count-1; j++ {
		for i := 0; i < count-j-1; i++ {
			if fn(nums[i], nums[i+1]) {
				nums[i], nums[i+1] = nums[i+1], nums[i]
			}
		}
	}
	return nums
}
